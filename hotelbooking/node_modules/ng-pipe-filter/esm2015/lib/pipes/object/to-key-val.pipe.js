/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { is_object } from '../../functions/is-object.func';
/**
 * @param Object input {key1:arg1, key2:arg2, key3:arg3....}
 * @param Array output [{k:key1, v:arg1}, {k:key2, v:arg2}, {k:key3, v:arg3}]
 * Usage: <span  *ngFor='let friendType of friendTypes | objtoarray'>{{friendType.k}} / {{ friendType.v }}</span>
 */
export class ToKeyValPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!is_object(input)) {
            return input;
        }
        /** @type {?} */
        let myobj;
        /** @type {?} */
        const arr = Object.keys(input).map((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (typeof input[key] === 'object') {
                myobj = { k: '', v: {} };
                myobj.k = key;
                myobj.v = input[key];
            }
            else {
                myobj.k = key;
                myobj.v = input[key];
            }
            return myobj;
        }));
        return arr;
    }
}
ToKeyValPipe.decorators = [
    { type: Pipe, args: [{ name: 'to_key_val' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG8ta2V5LXZhbC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctcGlwZS1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvb2JqZWN0L3RvLWtleS12YWwucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdDQUFnQyxDQUFDOzs7Ozs7QUFRekQsTUFBTSxPQUFPLFlBQVk7Ozs7O0lBRXJCLFNBQVMsQ0FBQyxLQUFVO1FBQ2hCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbkIsT0FBTyxLQUFLLENBQUM7U0FDaEI7O1lBRUcsS0FBVTs7Y0FDUixHQUFHLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHOzs7O1FBQUMsVUFBVSxHQUFHO1lBQzVDLElBQUksT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssUUFBUSxFQUFFO2dCQUNoQyxLQUFLLEdBQUcsRUFBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUMsQ0FBQztnQkFDdkIsS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ2QsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDeEI7aUJBQU07Z0JBQ0gsS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ2QsS0FBSyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDeEI7WUFDRCxPQUFPLEtBQUssQ0FBQztRQUNqQixDQUFDLEVBQUM7UUFFRixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7OztZQXRCSixJQUFJLFNBQUMsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSAgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtpc19vYmplY3R9IGZyb20gJy4uLy4uL2Z1bmN0aW9ucy9pcy1vYmplY3QuZnVuYyc7XHJcblxyXG4vKipcclxuKiBAcGFyYW0gT2JqZWN0IGlucHV0IHtrZXkxOmFyZzEsIGtleTI6YXJnMiwga2V5MzphcmczLi4uLn1cclxuKiBAcGFyYW0gQXJyYXkgb3V0cHV0IFt7azprZXkxLCB2OmFyZzF9LCB7azprZXkyLCB2OmFyZzJ9LCB7azprZXkzLCB2OmFyZzN9XVxyXG4qIFVzYWdlOiA8c3BhbiAgKm5nRm9yPSdsZXQgZnJpZW5kVHlwZSBvZiBmcmllbmRUeXBlcyB8IG9ianRvYXJyYXknPnt7ZnJpZW5kVHlwZS5rfX0gLyB7eyBmcmllbmRUeXBlLnYgfX08L3NwYW4+XHJcbiovXHJcbkBQaXBlKHsgbmFtZTogJ3RvX2tleV92YWwnIH0pXHJcbmV4cG9ydCBjbGFzcyBUb0tleVZhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSk6IGFueSB7XHJcbiAgICAgICAgaWYgKCFpc19vYmplY3QoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBteW9iajogYW55O1xyXG4gICAgICAgIGNvbnN0IGFyciA9IE9iamVjdC5rZXlzKGlucHV0KS5tYXAoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0W2tleV0gPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICBteW9iaiA9IHtrOiAnJywgdjoge319O1xyXG4gICAgICAgICAgICAgICAgbXlvYmouayA9IGtleTtcclxuICAgICAgICAgICAgICAgIG15b2JqLnYgPSBpbnB1dFtrZXldO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbXlvYmouayA9IGtleTtcclxuICAgICAgICAgICAgICAgIG15b2JqLnYgPSBpbnB1dFtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBteW9iajtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuXHRhcnI7XHJcbiAgICB9XHJcbn1cclxuIl19