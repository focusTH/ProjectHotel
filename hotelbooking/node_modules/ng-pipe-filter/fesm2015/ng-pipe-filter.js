import { Pipe, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function is_object(value) {
    return typeof value === 'object';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function is_string(value) {
    return typeof value === 'string';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function is_undefined(value) {
    return typeof value === 'undefined';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function only_number(value) {
    return /^\d+$/.test(value);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OnlyNumberPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (is_undefined(input)) {
            return false;
        }
        return only_number(input);
    }
}
OnlyNumberPipe.decorators = [
    { type: Pipe, args: [{
                name: 'only_number'
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BooleanPipesModule {
}
BooleanPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    OnlyNumberPipe
                ],
                exports: [
                    OnlyNumberPipe
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param Object input {arg1, arg2, arg3....}
 * @param Array output [arg1, arg2, arg3]
 */
class RangePipe {
    /**
     * @param {?} input
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    transform(input, min, max) {
        for (let i = min; i <= max; i++) {
            input.push(i);
        }
        return input;
    }
}
RangePipe.decorators = [
    { type: Pipe, args: [{ name: 'range' },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MathPipesModule {
}
MathPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    RangePipe
                ],
                exports: [
                    RangePipe
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param Object input {arg1, arg2, arg3....}
 * @param Array output [arg1, arg2, arg3]
 */
class ToArrayPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!is_object(input)) {
            return input;
        }
        return Object.keys(input).map((/**
         * @param {?} value
         * @return {?}
         */
        (value) => input[value]));
    }
}
ToArrayPipe.decorators = [
    { type: Pipe, args: [{ name: 'to_array' },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param Object input {key1:arg1, key2:arg2, key3:arg3....}
 * @param Array output [{k:key1, v:arg1}, {k:key2, v:arg2}, {k:key3, v:arg3}]
 * Usage: <span  *ngFor='let friendType of friendTypes | objtoarray'>{{friendType.k}} / {{ friendType.v }}</span>
 */
class ToKeyValPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!is_object(input)) {
            return input;
        }
        /** @type {?} */
        let myobj;
        /** @type {?} */
        const arr = Object.keys(input).map((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (typeof input[key] === 'object') {
                myobj = { k: '', v: {} };
                myobj.k = key;
                myobj.v = input[key];
            }
            else {
                myobj.k = key;
                myobj.v = input[key];
            }
            return myobj;
        }));
        return arr;
    }
}
ToKeyValPipe.decorators = [
    { type: Pipe, args: [{ name: 'to_key_val' },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param Object input {key1:arg1, key2:arg2, key3:arg3....}
 * @param Array output [{key1:arg1}, {key2:arg2}, {key3:arg3}]
 * Usage: <span *ngFor="let k of obj | to_key">{{k}}: {{obj[k]}}</span>
 */
class ToKeyPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!is_object(input)) {
            return input;
        }
        /** @type {?} */
        const keys = [];
        for (const key in input) {
            if (input.hasOwnProperty(key)) {
                keys.push(key);
            }
        }
        return keys;
    }
}
ToKeyPipe.decorators = [
    { type: Pipe, args: [{ name: 'to_key' },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ObjectPipesModule {
}
ObjectPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ToArrayPipe,
                    ToKeyValPipe,
                    ToKeyPipe
                ],
                exports: [
                    ToArrayPipe,
                    ToKeyValPipe,
                    ToKeyPipe
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CommaAddPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (is_undefined(input)) {
            return input;
        }
        return input.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    }
}
CommaAddPipe.decorators = [
    { type: Pipe, args: [{
                name: 'comma_add'
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CommaRemovePipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (is_undefined(input)) {
            return input;
        }
        return input.toString().replace(/,/g, '');
    }
}
CommaRemovePipe.decorators = [
    { type: Pipe, args: [{
                name: 'comma_remove'
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Nl2brPipe {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    transform(str) {
        if (typeof (str) === 'undefined') {
            return;
        }
        /** @type {?} */
        const replaced = str.replace(/(?:\r\n|\r|\n)/g, '<br />');
        return this.sanitizer.bypassSecurityTrustHtml(replaced);
    }
}
Nl2brPipe.decorators = [
    { type: Pipe, args: [{ name: 'nl2br' },] }
];
/** @nocollapse */
Nl2brPipe.ctorParameters = () => [
    { type: DomSanitizer }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    Nl2brPipe.prototype.sanitizer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StripTagsPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!is_string(input) || is_undefined(input)) {
            return input;
        }
        return input.replace(/<\S[^><]*>/g, '');
    }
}
StripTagsPipe.decorators = [
    { type: Pipe, args: [{
                name: 'strip_tags'
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StringPipesModule {
}
StringPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    CommaAddPipe,
                    CommaRemovePipe,
                    StripTagsPipe,
                    Nl2brPipe,
                ],
                exports: [
                    CommaAddPipe,
                    CommaRemovePipe,
                    StripTagsPipe,
                    Nl2brPipe,
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PipesFiltersModule {
}
PipesFiltersModule.decorators = [
    { type: NgModule, args: [{
                exports: [
                    BooleanPipesModule,
                    MathPipesModule,
                    ObjectPipesModule,
                    StringPipesModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { BooleanPipesModule, CommaAddPipe, CommaRemovePipe, MathPipesModule, Nl2brPipe, ObjectPipesModule, OnlyNumberPipe, PipesFiltersModule, RangePipe, StringPipesModule, StripTagsPipe, ToArrayPipe, ToKeyPipe, ToKeyValPipe, is_object, is_string, is_undefined, only_number };
//# sourceMappingURL=ng-pipe-filter.js.map
