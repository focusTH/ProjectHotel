{"version":3,"sources":["ng://ng-pipe-filter/lib/functions/is-object.func.ts","ng://ng-pipe-filter/lib/functions/is-string.func.ts","ng://ng-pipe-filter/lib/functions/is-undefined.func.ts","ng://ng-pipe-filter/lib/functions/only-number.func.ts","ng://ng-pipe-filter/lib/pipes/bool/only-number.pipe.ts","ng://ng-pipe-filter/lib/pipes/bool-index.ts","ng://ng-pipe-filter/lib/pipes/math/range.pipe.ts","ng://ng-pipe-filter/lib/pipes/math-index.ts","ng://ng-pipe-filter/lib/pipes/object/to-array.pipe.ts","ng://ng-pipe-filter/lib/pipes/object/to-key-val.pipe.ts","ng://ng-pipe-filter/lib/pipes/object/to-key.pipe.ts","ng://ng-pipe-filter/lib/pipes/object-index.ts","ng://ng-pipe-filter/lib/pipes/string/comma-add.pipe.ts","ng://ng-pipe-filter/lib/pipes/string/comma-remove.pipe.ts","ng://ng-pipe-filter/lib/pipes/string/nl2br.pipe.ts","ng://ng-pipe-filter/lib/pipes/string/strip-tags.pipe.ts","ng://ng-pipe-filter/lib/pipes/string-index.ts","ng://ng-pipe-filter/lib/pipe-filter.module.ts"],"names":["is_object","value","is_string","is_undefined","only_number","test","OnlyNumberPipe","prototype","transform","input","Pipe","args","name","BooleanPipesModule","NgModule","declarations","exports","RangePipe","min","max","i","push","MathPipesModule","ToArrayPipe","Object","keys","map","ToKeyValPipe","key","myobj","k","v","ToKeyPipe","hasOwnProperty","ObjectPipesModule","CommaAddPipe","toString","replace","CommaRemovePipe","Nl2brPipe","sanitizer","this","str","replaced","bypassSecurityTrustHtml","DomSanitizer","StripTagsPipe","StringPipesModule","PipesFiltersModule"],"mappings":"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","sourcesContent":["export function is_object (value: any): boolean {\r\n  return typeof value === 'object';\r\n}\r\n","export function is_string (value: any): value is string {\r\n  return typeof value === 'string';\r\n}\r\n","export function is_undefined (value: any): value is undefined {\r\n  return typeof value === 'undefined';\r\n}\r\n","export function only_number (value: any): value is boolean {\r\n  return  /^\\d+$/.test(value);\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {is_undefined} from '../../functions/is-undefined.func';\r\nimport {only_number} from '../../functions/only-number.func';\r\n@Pipe({\r\n  name: 'only_number'\r\n})\r\nexport class OnlyNumberPipe implements PipeTransform {\r\n    transform(input: string): boolean {\r\n        if (is_undefined(input)) {\r\n            return false;\r\n        }\r\n        return only_number(input);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { OnlyNumberPipe } from './bool/only-number.pipe';\r\n\r\nexport * from './bool/only-number.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    OnlyNumberPipe\r\n  ],\r\n  exports: [\r\n    OnlyNumberPipe\r\n  ]\r\n})\r\nexport class BooleanPipesModule {\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n/**\r\n* @param Object input {arg1, arg2, arg3....}\r\n* @param Array output [arg1, arg2, arg3]\r\n*/\r\n@Pipe({ name: 'range' })\r\nexport class RangePipe implements PipeTransform {\r\n    transform(input, min: number, max: number): any {\r\n        for (let i = min; i <= max; i++) {\r\n            input.push(i);\r\n        }\r\n        return input;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RangePipe } from './math/range.pipe';\r\nexport * from './math/range.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    RangePipe\r\n  ],\r\n  exports: [\r\n    RangePipe\r\n  ]\r\n})\r\nexport class MathPipesModule {\r\n}\r\n","import { Pipe, PipeTransform  } from '@angular/core';\r\nimport {is_object} from '../../functions/is-object.func';\r\n\r\n/**\r\n* @param Object input {arg1, arg2, arg3....}\r\n* @param Array output [arg1, arg2, arg3]\r\n*/\r\n@Pipe({ name: 'to_array' })\r\nexport class ToArrayPipe implements PipeTransform {\r\n    transform (input: any): any {\r\n\r\n        if (!is_object(input)) {\r\n            return input;\r\n        }\r\n    return Object.keys(input).map((value) => input[value]);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform  } from '@angular/core';\r\nimport {is_object} from '../../functions/is-object.func';\r\n\r\n/**\r\n* @param Object input {key1:arg1, key2:arg2, key3:arg3....}\r\n* @param Array output [{k:key1, v:arg1}, {k:key2, v:arg2}, {k:key3, v:arg3}]\r\n* Usage: <span  *ngFor='let friendType of friendTypes | objtoarray'>{{friendType.k}} / {{ friendType.v }}</span>\r\n*/\r\n@Pipe({ name: 'to_key_val' })\r\nexport class ToKeyValPipe implements PipeTransform {\r\n\r\n    transform(input: any): any {\r\n        if (!is_object(input)) {\r\n            return input;\r\n        }\r\n\r\n        let myobj: any;\r\n        const arr = Object.keys(input).map(function (key) {\r\n            if (typeof input[key] === 'object') {\r\n                myobj = {k: '', v: {}};\r\n                myobj.k = key;\r\n                myobj.v = input[key];\r\n            } else {\r\n                myobj.k = key;\r\n                myobj.v = input[key];\r\n            }\r\n            return myobj;\r\n        });\r\n\r\n        return\tarr;\r\n    }\r\n}\r\n","import { Pipe, PipeTransform  } from '@angular/core';\r\nimport {is_object} from '../../functions/is-object.func';\r\n\r\n/**\r\n* @param Object input {key1:arg1, key2:arg2, key3:arg3....}\r\n* @param Array output [{key1:arg1}, {key2:arg2}, {key3:arg3}]\r\n* Usage: <span *ngFor=\"let k of obj | to_key\">{{k}}: {{obj[k]}}</span>\r\n*/\r\n@Pipe({ name: 'to_key' })\r\nexport class ToKeyPipe implements PipeTransform {\r\n    transform(input): any {\r\n        if (!is_object(input)) {\r\n            return input;\r\n        }\r\n        const keys = [];\r\n        for (const key in input) {\r\n            if (input.hasOwnProperty(key)) {\r\n                keys.push(key);\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { ToArrayPipe } from './object/to-array.pipe';\r\nimport { ToKeyValPipe } from './object/to-key-val.pipe';\r\nimport { ToKeyPipe } from './object/to-key.pipe';\r\n\r\nexport * from './object/to-array.pipe';\r\nexport * from './object/to-key-val.pipe';\r\nexport * from './object/to-key.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ToArrayPipe,\r\n    ToKeyValPipe,\r\n    ToKeyPipe\r\n  ],\r\n  exports: [\r\n    ToArrayPipe,\r\n    ToKeyValPipe,\r\n    ToKeyPipe\r\n  ]\r\n})\r\nexport class ObjectPipesModule {\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {is_undefined} from '../../functions/is-undefined.func';\r\n\r\n@Pipe({\r\n  name: 'comma_add'\r\n})\r\nexport class CommaAddPipe implements PipeTransform {\r\n\r\n    transform(input: string): any {\r\n        if (is_undefined(input)) {\r\n            return input;\r\n        }\r\n        return input.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n    }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {is_undefined} from '../../functions/is-undefined.func';\r\n\r\n@Pipe({\r\n  name: 'comma_remove'\r\n})\r\nexport class CommaRemovePipe implements PipeTransform {\r\n\r\n  transform(input: string): any {\r\n\r\n    if (is_undefined(input)) {\r\n        return input;\r\n    }\r\n    return input.toString().replace(/,/g , '');\r\n  }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({name: 'nl2br'})\r\nexport class Nl2brPipe implements PipeTransform {\r\n    constructor(private sanitizer: DomSanitizer) {}\r\n    transform(str: string): any {\r\n        if (typeof(str) === 'undefined') { return; }\r\n        const replaced = str.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');\r\n        return this.sanitizer.bypassSecurityTrustHtml(replaced);\r\n    }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {is_string} from '../../functions/is-string.func';\r\nimport {is_undefined} from '../../functions/is-undefined.func';\r\n\r\n@Pipe({\r\n  name: 'strip_tags'\r\n})\r\nexport class StripTagsPipe implements PipeTransform {\r\n\r\n    transform(input: string): any {\r\n        if (!is_string(input) || is_undefined(input)) {\r\n            return input;\r\n        }\r\n        return input.replace(/<\\S[^><]*>/g, '');\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommaAddPipe } from './string/comma-add.pipe';\r\nimport { CommaRemovePipe } from './string/comma-remove.pipe';\r\nimport { Nl2brPipe } from './string/nl2br.pipe';\r\nimport { StripTagsPipe } from './string/strip-tags.pipe';\r\n\r\nexport * from './string/comma-add.pipe';\r\nexport * from './string/comma-remove.pipe';\r\nexport * from './string/nl2br.pipe';\r\nexport * from './string/strip-tags.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CommaAddPipe,\r\n    CommaRemovePipe,\r\n    StripTagsPipe,\r\n    Nl2brPipe,\r\n  ],\r\n  exports: [\r\n    CommaAddPipe,\r\n    CommaRemovePipe,\r\n    StripTagsPipe,\r\n    Nl2brPipe,\r\n  ]\r\n})\r\nexport class StringPipesModule {\r\n}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { BooleanPipesModule } from './pipes/bool-index';\r\nimport { MathPipesModule } from './pipes/math-index';\r\nimport { ObjectPipesModule } from './pipes/object-index';\r\nimport { StringPipesModule } from './pipes/string-index';\r\n@NgModule({\r\n  exports: [\r\n    BooleanPipesModule,\r\n    MathPipesModule,\r\n    ObjectPipesModule,\r\n    StringPipesModule\r\n  ]\r\n})\r\nexport class PipesFiltersModule {}\r\n"]}