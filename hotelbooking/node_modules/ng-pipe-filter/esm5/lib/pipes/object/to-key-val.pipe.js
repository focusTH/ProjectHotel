/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { is_object } from '../../functions/is-object.func';
/**
 * @param Object input {key1:arg1, key2:arg2, key3:arg3....}
 * @param Array output [{k:key1, v:arg1}, {k:key2, v:arg2}, {k:key3, v:arg3}]
 * Usage: <span  *ngFor='let friendType of friendTypes | objtoarray'>{{friendType.k}} / {{ friendType.v }}</span>
 */
var ToKeyValPipe = /** @class */ (function () {
    function ToKeyValPipe() {
    }
    /**
     * @param {?} input
     * @return {?}
     */
    ToKeyValPipe.prototype.transform = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (!is_object(input)) {
            return input;
        }
        /** @type {?} */
        var myobj;
        /** @type {?} */
        var arr = Object.keys(input).map((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (typeof input[key] === 'object') {
                myobj = { k: '', v: {} };
                myobj.k = key;
                myobj.v = input[key];
            }
            else {
                myobj.k = key;
                myobj.v = input[key];
            }
            return myobj;
        }));
        return arr;
    };
    ToKeyValPipe.decorators = [
        { type: Pipe, args: [{ name: 'to_key_val' },] }
    ];
    return ToKeyValPipe;
}());
export { ToKeyValPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG8ta2V5LXZhbC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctcGlwZS1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvb2JqZWN0L3RvLWtleS12YWwucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGdDQUFnQyxDQUFDOzs7Ozs7QUFPekQ7SUFBQTtJQXVCQSxDQUFDOzs7OztJQXBCRyxnQ0FBUzs7OztJQUFULFVBQVUsS0FBVTtRQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ25CLE9BQU8sS0FBSyxDQUFDO1NBQ2hCOztZQUVHLEtBQVU7O1lBQ1IsR0FBRyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRzs7OztRQUFDLFVBQVUsR0FBRztZQUM1QyxJQUFJLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsRUFBRTtnQkFDaEMsS0FBSyxHQUFHLEVBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUM7Z0JBQ3ZCLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUNkLEtBQUssQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3hCO2lCQUFNO2dCQUNILEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUNkLEtBQUssQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3hCO1lBQ0QsT0FBTyxLQUFLLENBQUM7UUFDakIsQ0FBQyxFQUFDO1FBRUYsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOztnQkF0QkosSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRTs7SUF1QjVCLG1CQUFDO0NBQUEsQUF2QkQsSUF1QkM7U0F0QlksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7aXNfb2JqZWN0fSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvaXMtb2JqZWN0LmZ1bmMnO1xyXG5cclxuLyoqXHJcbiogQHBhcmFtIE9iamVjdCBpbnB1dCB7a2V5MTphcmcxLCBrZXkyOmFyZzIsIGtleTM6YXJnMy4uLi59XHJcbiogQHBhcmFtIEFycmF5IG91dHB1dCBbe2s6a2V5MSwgdjphcmcxfSwge2s6a2V5MiwgdjphcmcyfSwge2s6a2V5MywgdjphcmczfV1cclxuKiBVc2FnZTogPHNwYW4gICpuZ0Zvcj0nbGV0IGZyaWVuZFR5cGUgb2YgZnJpZW5kVHlwZXMgfCBvYmp0b2FycmF5Jz57e2ZyaWVuZFR5cGUua319IC8ge3sgZnJpZW5kVHlwZS52IH19PC9zcGFuPlxyXG4qL1xyXG5AUGlwZSh7IG5hbWU6ICd0b19rZXlfdmFsJyB9KVxyXG5leHBvcnQgY2xhc3MgVG9LZXlWYWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblxyXG4gICAgdHJhbnNmb3JtKGlucHV0OiBhbnkpOiBhbnkge1xyXG4gICAgICAgIGlmICghaXNfb2JqZWN0KGlucHV0KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbXlvYmo6IGFueTtcclxuICAgICAgICBjb25zdCBhcnIgPSBPYmplY3Qua2V5cyhpbnB1dCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dFtrZXldID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgbXlvYmogPSB7azogJycsIHY6IHt9fTtcclxuICAgICAgICAgICAgICAgIG15b2JqLmsgPSBrZXk7XHJcbiAgICAgICAgICAgICAgICBteW9iai52ID0gaW5wdXRba2V5XTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG15b2JqLmsgPSBrZXk7XHJcbiAgICAgICAgICAgICAgICBteW9iai52ID0gaW5wdXRba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbXlvYmo7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVyblx0YXJyO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==