import { Pipe, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function is_object(value) {
    return typeof value === 'object';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function is_string(value) {
    return typeof value === 'string';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function is_undefined(value) {
    return typeof value === 'undefined';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function only_number(value) {
    return /^\d+$/.test(value);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var OnlyNumberPipe = /** @class */ (function () {
    function OnlyNumberPipe() {
    }
    /**
     * @param {?} input
     * @return {?}
     */
    OnlyNumberPipe.prototype.transform = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (is_undefined(input)) {
            return false;
        }
        return only_number(input);
    };
    OnlyNumberPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'only_number'
                },] }
    ];
    return OnlyNumberPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BooleanPipesModule = /** @class */ (function () {
    function BooleanPipesModule() {
    }
    BooleanPipesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        OnlyNumberPipe
                    ],
                    exports: [
                        OnlyNumberPipe
                    ]
                },] }
    ];
    return BooleanPipesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param Object input {arg1, arg2, arg3....}
 * @param Array output [arg1, arg2, arg3]
 */
var RangePipe = /** @class */ (function () {
    function RangePipe() {
    }
    /**
     * @param {?} input
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    RangePipe.prototype.transform = /**
     * @param {?} input
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    function (input, min, max) {
        for (var i = min; i <= max; i++) {
            input.push(i);
        }
        return input;
    };
    RangePipe.decorators = [
        { type: Pipe, args: [{ name: 'range' },] }
    ];
    return RangePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MathPipesModule = /** @class */ (function () {
    function MathPipesModule() {
    }
    MathPipesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        RangePipe
                    ],
                    exports: [
                        RangePipe
                    ]
                },] }
    ];
    return MathPipesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param Object input {arg1, arg2, arg3....}
 * @param Array output [arg1, arg2, arg3]
 */
var ToArrayPipe = /** @class */ (function () {
    function ToArrayPipe() {
    }
    /**
     * @param {?} input
     * @return {?}
     */
    ToArrayPipe.prototype.transform = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (!is_object(input)) {
            return input;
        }
        return Object.keys(input).map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return input[value]; }));
    };
    ToArrayPipe.decorators = [
        { type: Pipe, args: [{ name: 'to_array' },] }
    ];
    return ToArrayPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param Object input {key1:arg1, key2:arg2, key3:arg3....}
 * @param Array output [{k:key1, v:arg1}, {k:key2, v:arg2}, {k:key3, v:arg3}]
 * Usage: <span  *ngFor='let friendType of friendTypes | objtoarray'>{{friendType.k}} / {{ friendType.v }}</span>
 */
var ToKeyValPipe = /** @class */ (function () {
    function ToKeyValPipe() {
    }
    /**
     * @param {?} input
     * @return {?}
     */
    ToKeyValPipe.prototype.transform = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (!is_object(input)) {
            return input;
        }
        /** @type {?} */
        var myobj;
        /** @type {?} */
        var arr = Object.keys(input).map((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (typeof input[key] === 'object') {
                myobj = { k: '', v: {} };
                myobj.k = key;
                myobj.v = input[key];
            }
            else {
                myobj.k = key;
                myobj.v = input[key];
            }
            return myobj;
        }));
        return arr;
    };
    ToKeyValPipe.decorators = [
        { type: Pipe, args: [{ name: 'to_key_val' },] }
    ];
    return ToKeyValPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param Object input {key1:arg1, key2:arg2, key3:arg3....}
 * @param Array output [{key1:arg1}, {key2:arg2}, {key3:arg3}]
 * Usage: <span *ngFor="let k of obj | to_key">{{k}}: {{obj[k]}}</span>
 */
var ToKeyPipe = /** @class */ (function () {
    function ToKeyPipe() {
    }
    /**
     * @param {?} input
     * @return {?}
     */
    ToKeyPipe.prototype.transform = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (!is_object(input)) {
            return input;
        }
        /** @type {?} */
        var keys = [];
        for (var key in input) {
            if (input.hasOwnProperty(key)) {
                keys.push(key);
            }
        }
        return keys;
    };
    ToKeyPipe.decorators = [
        { type: Pipe, args: [{ name: 'to_key' },] }
    ];
    return ToKeyPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ObjectPipesModule = /** @class */ (function () {
    function ObjectPipesModule() {
    }
    ObjectPipesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        ToArrayPipe,
                        ToKeyValPipe,
                        ToKeyPipe
                    ],
                    exports: [
                        ToArrayPipe,
                        ToKeyValPipe,
                        ToKeyPipe
                    ]
                },] }
    ];
    return ObjectPipesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommaAddPipe = /** @class */ (function () {
    function CommaAddPipe() {
    }
    /**
     * @param {?} input
     * @return {?}
     */
    CommaAddPipe.prototype.transform = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (is_undefined(input)) {
            return input;
        }
        return input.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    };
    CommaAddPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'comma_add'
                },] }
    ];
    return CommaAddPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommaRemovePipe = /** @class */ (function () {
    function CommaRemovePipe() {
    }
    /**
     * @param {?} input
     * @return {?}
     */
    CommaRemovePipe.prototype.transform = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (is_undefined(input)) {
            return input;
        }
        return input.toString().replace(/,/g, '');
    };
    CommaRemovePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'comma_remove'
                },] }
    ];
    return CommaRemovePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Nl2brPipe = /** @class */ (function () {
    function Nl2brPipe(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    Nl2brPipe.prototype.transform = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        if (typeof (str) === 'undefined') {
            return;
        }
        /** @type {?} */
        var replaced = str.replace(/(?:\r\n|\r|\n)/g, '<br />');
        return this.sanitizer.bypassSecurityTrustHtml(replaced);
    };
    Nl2brPipe.decorators = [
        { type: Pipe, args: [{ name: 'nl2br' },] }
    ];
    /** @nocollapse */
    Nl2brPipe.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    return Nl2brPipe;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    Nl2brPipe.prototype.sanitizer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StripTagsPipe = /** @class */ (function () {
    function StripTagsPipe() {
    }
    /**
     * @param {?} input
     * @return {?}
     */
    StripTagsPipe.prototype.transform = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (!is_string(input) || is_undefined(input)) {
            return input;
        }
        return input.replace(/<\S[^><]*>/g, '');
    };
    StripTagsPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'strip_tags'
                },] }
    ];
    return StripTagsPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StringPipesModule = /** @class */ (function () {
    function StringPipesModule() {
    }
    StringPipesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        CommaAddPipe,
                        CommaRemovePipe,
                        StripTagsPipe,
                        Nl2brPipe,
                    ],
                    exports: [
                        CommaAddPipe,
                        CommaRemovePipe,
                        StripTagsPipe,
                        Nl2brPipe,
                    ]
                },] }
    ];
    return StringPipesModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PipesFiltersModule = /** @class */ (function () {
    function PipesFiltersModule() {
    }
    PipesFiltersModule.decorators = [
        { type: NgModule, args: [{
                    exports: [
                        BooleanPipesModule,
                        MathPipesModule,
                        ObjectPipesModule,
                        StringPipesModule
                    ]
                },] }
    ];
    return PipesFiltersModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { BooleanPipesModule, CommaAddPipe, CommaRemovePipe, MathPipesModule, Nl2brPipe, ObjectPipesModule, OnlyNumberPipe, PipesFiltersModule, RangePipe, StringPipesModule, StripTagsPipe, ToArrayPipe, ToKeyPipe, ToKeyValPipe, is_object, is_string, is_undefined, only_number };
//# sourceMappingURL=ng-pipe-filter.js.map
